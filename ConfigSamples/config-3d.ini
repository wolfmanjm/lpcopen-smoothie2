# For Prime alpha
[general]
grbl_mode = false
config-override = false
rpi_port_enable = false
rpi_baudrate = 115200
#aux_play_led = gpio5_12    # optional secondary play led (for lighted kill buttons) on G2 p4

[motion control]
default_feed_rate = 4000 # Default speed (mm/minute) for G1/G2/G3 moves
default_seek_rate = 4000 # Default speed (mm/minute) for G0 moves
#mm_per_line_segment = 1  # segmentation if using grid compensation
#delta_segments_per_second = 100 # segmentation for deltas
mm_per_arc_segment = 0.0 # Fixed length for line segments that divide arcs, 0 to disable
mm_max_arc_error = 0.01 # The maximum error for line segments that divide arcs 0 to disable
arc_correction = 5
default_acceleration = 1000.0 # default acceleration in mm/sec²
arm_solution = cartesian
x_axis_max_speed = 30000 # Maximum speed in mm/min
y_axis_max_speed = 30000 # Maximum speed in mm/min
z_axis_max_speed = 1800  # Maximum speed in mm/min
#max_speed = 0           # Overall Maximum speed in mm/min (0 disables it)
#save_g92 = false       # set to true to save G92 with M500
#save_wcs = false       # set to true to save WCS (G54 etc) with M500

[planner]
junction_deviation = 0.05
#z_junction_deviation = 0.0
minimum_planner_speed = 0
planner_queue_size = 32

[actuator]
alpha.steps_per_mm = 800       # Steps per mm for alpha ( X ) stepper
alpha.step_pin = pe.14         # Pin for alpha stepper step signal
alpha.dir_pin = pb.0           # Pin for alpha stepper direction, add '!' to reverse direction
alpha.max_rate = 30000         # Maximum rate in mm/min
alpha.microsteps = 32          # sets micro stepping (default 32)
#alpha.external_driver = true  # sets this as an external driver, default is false, except for epsilon and zeta

beta.steps_per_mm = 800        # Steps per mm for beta ( Y ) stepper
beta.step_pin = pe.9           # Pin for beta stepper step signal
beta.dir_pin = pe.11           # Pin for beta stepper direction, add '!' to reverse direction
beta.max_rate = 30000          # Maxmimum rate in mm/min
beta.microsteps = 32           # sets micro stepping (default 32)

gamma.steps_per_mm = 800    # Steps per mm for gamma ( Z ) stepper
gamma.step_pin = pe.8       # Pin for gamma stepper step signal
gamma.dir_pin = p7.1        # Pin for gamma stepper direction, add '!' to reverse direction
gamma.max_rate = 30000      # Maximum rate in mm/min
gamma.acceleration = 500    # overrides the default acceleration for this axis
gamma.microsteps = 32       # sets micro stepping (default 32)

# Delta is first extruder, we set common stuff here instead of in extruder section
delta.steps_per_mm = 700       # Steps per mm for extruder stepper
delta.step_pin = p6.11         # Pin for extruder step signal
delta.dir_pin = p6.10          # Pin for extruder dir signal ( add '!' to reverse direction )
delta.acceleration = 500       # Acceleration for the stepper motor mm/sec²
delta.max_rate = 3000.0        # Maximum rate in mm/min
delta.microsteps = 32          # sets micro stepping (default 32)

common.check_driver_errors = true     # set to true means the driver (tmc2660) error bits are checked
common.halt_on_driver_alarm = false   # if set to true means ON_HALT is entered on any error bits being set

[tmc2660]
# common settings for all tmc2660 drivers
common.max_current = 2800      # max current in milliamps

# settings specific to each tmc2660 driver instance
alpha.step_interpolation = true # set to true to turn on the step interpolation
beta.step_interpolation = true  # set to true to turn on the step interpolation
gamma.step_interpolation = true # set to true to turn on the step interpolation
delta.step_interpolation = false # set to true to turn on the step interpolation

# direct register setting... order and codes are chip dependent, values are in 32 bit Hex
# NOTE that the microsteps and current settings will be over written by the settings in current control and actuator
# M911 prints the current settings out in this format for copy/paste
#alpha.reg = 00204,981C0,A0000,C000E,E0060


# define the CS pins for the TMC2660 SPI
alpha.spi_cs_pin = gpio3_8
beta.spi_cs_pin = gpio7_12
gamma.spi_cs_pin = gpio7_7
delta.spi_cs_pin =  gpio2_8

[current control]
alpha.current  = 1.8    # X stepper motor current
beta.current   = 0.6    # Y stepper motor current
gamma.current  = 0.7    # Z stepper motor current
delta.current  = 0.7    # First extruder stepper motor current

[switch]
fan.enable = true # Enable this module
fan.input_on_command = M106 # Command that will turn this switch on
fan.input_off_command = M107 # Command that will turn this switch off
fan.output_pin = pe.6 # Pin this module controls
fan.output_type = sigmadeltapwm # PWM output settable with S parameter in the input_on_comand

psu.enable = true             # Enable this module
psu.input_on_command = M80    # Command that will turn this switch on
psu.input_off_command = M81   # Command that will turn this switch off
psu.output_pin = gpio7_5o!    # Pin this module controls (SSR1 requires open drain and inverting)
psu.output_type = digital     # Digital means this is just an on or off pin

# for testing
led1.enable            = true
led1.input_on_command  = M1
led1.input_off_command = M2
led1.output_pin        = pb.6
led1.output_type       = digital

# for testing
led2.enable            = true
led2.input_on_command  = M3
led2.input_off_command = M4
led2.output_pin        = p7.6
led2.output_type       = sigmadeltapwm

#but1.enable             = true                     # Enable this module
#but1.input_pin          = gpio0_7!                 # button
#but1.output_on_command  = M1                       # command to send
#but1.output_off_command = M2                       # command to send
#but1.input_pin_behavior = toggle

[temperature switch]
hotend.enable = true            #
hotend.designator = T           # first character of the temperature control designator to use as the temperature sensor to monitor
hotend.switch = fan            # select which switch to use, matches the name of the defined switch
hotend.threshold_temp = 60.0   # temperature to turn on (if rising) or off the switch
hotend.heatup_poll = 15        # poll heatup at 15 sec intervals
hotend.cooldown_poll = 60      # poll cooldown at 60 sec intervals

[extruder]
hotend.enable = true             # Whether to activate the extruder module at all. All configuration is ignored if false
hotend.tool_id = 0               # T0 will select
# Firmware retract settings when using G10/G11, these are the defaults if not defined, must be defined for each extruder if not using the defaults
#hotend.retract_length =            3           # Retract length in mm
#hotend.retract_feedrate =         45           # Retract feedrate in mm/sec
#hotend.retract_recover_length =    0           # Additional length for recover
#hotend.retract_recover_feedrate =  8           # Recover feedrate in mm/sec (should be less than retract feedrate)
#hotend.retract_zlift_length =      0           # Z-lift on retract in mm, 0 disables
#hotend.retract_zlift_feedrate = 6000           # Z-lift feedrate in mm/min (Note mm/min NOT mm/sec)

# Second extruder module configuration
hotend2.enable = false            # Whether to activate the extruder module at all. All configuration is ignored if false
hotend2.tool_id = 1               # T1 will select

hotend2.x_offset = 0             # x offset from origin in mm
hotend2.y_offset = 25.0          # y offset from origin in mm
hotend2.z_offset = 0             # z offset from origin in mm

[temperature control]
hotend.enable = true             # Whether to activate this ( 'hotend' ) module at all.
hotend.tool_id = 0               # T0 will select
hotend.thermistor_pin = ADC0_1   # Pin for the thermistor to read
hotend.heater_pin = P6.2         # Pin that controls the heater, set to nc if a readonly thermistor is being defined
hotend.thermistor = EPCOS100K    # See http://smoothieware.org/temperaturecontrol#toc5
hotend.designator = T            # Designator letter for this module

hotend2.enable = false            # Whether to activate this ( 'hotend' ) module at all.
hotend2.tool_id = 1               # T1 will select
hotend2.thermistor_pin = ADC0_3   # Pin for the thermistor to read
hotend2.heater_pin = p2.5         # Pin that controls the heater, set to nc if a readonly thermistor is being defined
hotend2.thermistor = EPCOS100K    # See http://smoothieware.org/temperaturecontrol#toc5
hotend2.designator = T            # Designator letter for this module

bed.enable = true                 # Whether to activate this module at all.
bed.thermistor_pin = ADC0_2       # Pin for the thermistor to read
bed.heater_pin = p6.9             # Pin that controls the heater
bed.thermistor = Honeywell100K    # See http://smoothieware.org/temperaturecontrol#thermistor
bed.designator = B                # Designator letter for this module

# board temperature, no controller, readonly
board.enable = true                # Whether to activate this module at all.
board.thermistor_pin = ADC0_6      # Pin for the thermistor to read
board.designator = P               # Designator letter for this module
board.beta = 4334

[kill button]
enable = false         # Set to true to enable a kill button
pin = gpio4_4          # Kill button pin. on G2 p3
toggle_enable = false  # set to true to make it a toggle button (like an estop)
unkill_enable = true   # enable kill button hold for 2 seconds does unkill

[pwm]
frequency=10000        # PWM frequency
[laser]
enable = false # Whether to activate the laser module at all
pwm_pin = p4.2 # This pin will be PWMed to control the laser. on G6 p3
#inverted_pwm = false # set to true to invert the pwm
#ttl_pin = P1.30  # This pin turns on when the laser turns on, and off when the laser turns off.
#maximum_power = 1.0 # This is the maximum duty cycle that will be applied to the laser
#minimum_power = 0.0 # This is a value just below the minimum duty cycle that keeps the laser active without actually burning.
#default_power = 0.8 # This is the default laser power that will be used for cuts if a power has not been specified.  The value is a scale between the maximum and minimum power levels specified above

[endstops]
common.debounce_ms = 0         # debounce time in ms (actually 10ms min)
#common.is_delta = true
#common.homing_order = XYZ     # order in which axis homes (if defined)

minx.enable = true             # enable an endstop
minx.pin = p4.0                # pin
minx.homing_direction = home_to_min      # direction it moves to the endstop
minx.homing_position = 0                # the cartesian coordinate this is set to when it homes
minx.axis = X                # the axis designator
minx.max_travel = 500              # the maximum travel in mm before it times out
minx.fast_rate = 30               # fast homing rate in mm/sec
minx.slow_rate = 5               # slow homing rate in mm/sec
minx.retract = 5                # bounce off endstop in mm
minx.limit_enable = false        # enable hard limit

miny.enable = true                  # enable an endstop
miny.pin = pf.9                     # pin
miny.homing_direction = home_to_min # direction it moves to the endstop
miny.homing_position = 0            # the cartesian coordinate this is set to when it homes
miny.axis = Y                       # the axis designator
miny.max_travel = 500               # the maximum travel in mm before it times out
miny.fast_rate = 30                 # fast homing rate in mm/sec
miny.slow_rate = 5                  # slow homing rate in mm/sec
miny.retract = 5                    # bounce off endstop in mm
miny.limit_enable = false            # enable hard limits

minz.enable = true                  # enable an endstop
minz.pin = pf.8                     # pin
minz.homing_direction = home_to_min # direction it moves to the endstop
minz.homing_position = 0            # the cartesian coordinate this is set to when it homes
minz.axis = Z                       # the axis designator
minz.max_travel = 500               # the maximum travel in mm before it times out
minz.fast_rate = 30                 # fast homing rate in mm/sec
minz.slow_rate = 5                  # slow homing rate in mm/sec
minz.retract = 5                    # bounce off endstop in mm
minz.limit_enable = false            # enable hard limits

#maxx.pin = pb.4
#maxy.pin = pb.5
#maxz.pin = pb.2

[zprobe]
enable = false              # Set to true to enable a zprobe
probe_pin = pb.3!^          # Pin probe is attached to, if NC remove the !
slow_feedrate = 5           # Mm/sec probe feed rate
fast_feedrate = 100         # Move feedrate mm/sec
probe_height = 5            # How much above bed to start probe
max_travel = 200            # maximum z travel before it gives up
leveling = three point      # leveling strategy to use
#leveling = delta grid      # leveling strategy to use
#leveling = cartesian grid  # leveling strategy to use
#calibration = delta        # calibration strategy to use

[three point leveling strategy]
# Example for 3-point leveling strategy
point1 = 100.0,0.0       # the first probe point (x,y) optional may be defined with M557
point2 = 200.0,200.0     # the second probe point (x,y)
point3 = 0.0,200.0       # the third probe point (x,y)
home_first = true        # home the XY axis before probing
tolerance = 0.03         # the probe tolerance in mm, anything less that this will be ignored, default is 0.03mm
probe_offsets = 0,0,0    # the probe offsets from nozzle, must be x,y,z, default is no offset
save_plane = false       # set to true to allow the bed plane to be saved with M500 default is false

[delta calibration strategy]
# Example for the delta calibration strategy
radius = 100             # the probe radius
initial_height = 20      # Height at which to start looking for bed

[delta grid leveling strategy]
# Example for the delta grid leveling strategy
radius = 50            # Grid radius in millimeters
size = 7               # Grid size, must be an odd number
do_home = true         # Whether to home before calibration
save = true            # Whether to automatically save the grid
initial_height = 20    # Height at which to start looking for bed

[cartesian grid leveling strategy]
# Example for the cart grid leveling strategy
x_size =          75       # size of bed in the X axis
y_size =          50       # size of bed in the Y axis
grid_x_size =      7       # The size of the grid, for example, 7 causes a 7x7 grid with 49 points. Must be an odd number.
grid_y_size =      7
do_home =          true
probe_offsets =    0,0,0   # Optional probe offsets from the nozzle or tool head
save =             false   # If the saved grid is to be loaded on boot then this must be set to true
initial_height =    20     # Height at which to start looking for bed

# optional settings
#only_by_two_corners = true
#dampening_start =  0.5    # algorithm will be applied less and less from this height onwards
#height_limit =       1    # algorithm will stop applying compensation from this point onwards
#mm_per_line_segment = 1  needed in [motion control] for cartesians using rectangular-grid

[voltage monitor]
vmotor = ADC0_7  # monitors motor voltage (Vbb) needed as drivers cannot be setup until this is on
vfet = ADC0_5    # monitors fet voltage

[network]
enable = true
shell_enable = true
ftp_enable = true
webserver_enable = true
hostname = smoothiev2          # set hostname for device
ip_address = auto              # uses dhcp to get ip address (default)
#ip_address = 192.168.1.101    # OR set these
#ip_gateway = 192.168.1.254
#ip_mask = 255.255.255.0


